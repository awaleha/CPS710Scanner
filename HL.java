/* HL.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. HL.java */
public class HL/*@bgen(jjtree)*/implements HLTreeConstants, HLConstants {/*@bgen(jjtree)*/
  protected static JJTHLState jjtree = new JJTHLState();

// ===========================================================================
//                                 P A R S E R   
// ===========================================================================

//------------------------    STATEMENTS AND EXPRESSIONS -----------------------
  static final public 
SimpleNode start() throws ParseException {
    expression();
    jj_consume_token(SEMICOL);
{if ("" != null) return (SimpleNode) (jjtree.popNode());}
    throw new Error("Missing return statement in function");
  }

  static final public void S() throws ParseException {/*@bgen(jjtree) S */
  ASTS jjtn000 = new ASTS(JJTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case IF:
      case INT:
      case LIST:
      case PRINT:
      case STR:
      case 69:{
        common_statement();
        jj_consume_token(SEMICOL);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        if (jj_2_1(2147483647)) {
          assignment();
          jj_consume_token(SEMICOL);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ADD:
          case LSQUARE:
          case LPAREN:
          case SUB:
          case INTEGER:
          case IDENTIFIER:
          case STRING:{
            expression();
            jj_consume_token(SEMICOL);
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case IF:
    case INT:
    case LIST:
    case PRINT:
    case STR:
    case 69:{
      common_statement();
      break;
      }
    case RETURN:{
      return_stat();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      if (jj_2_2(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          assignment();
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

// common_statement is a statement that can be integrated into any list of 
// possible statements without worrying that additional lookaheads will be needed.
// It excludes return_stat because these are not needed at the top level
// and assignments and function calls because they require additional lookaheads to 
// be properly detected.
// 
  static final public void common_statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF:{
      if_stat();
      break;
      }
    case FOR:{
      for_stat();
      break;
      }
    case 69:{
      while_stat();
      break;
      }
    case PRINT:{
      print_stat();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      if (jj_2_3(2)) {
        simple_decl();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INT:
        case LIST:
        case STR:{
          fn_decl();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void body() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case IF:
      case INT:
      case LIST:
      case PRINT:
      case RETURN:
      case STR:
      case IDENTIFIER:
      case 69:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_1;
      }
      statement();
      jj_consume_token(SEMICOL);
    }
  }

  static final public void clause() throws ParseException {
    label_2:
    while (true) {
      statement();
      jj_consume_token(SEMICOL);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case IF:
      case INT:
      case LIST:
      case PRINT:
      case RETURN:
      case STR:
      case IDENTIFIER:
      case 69:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
  }

//---------------------------   DECLARATIONS ----------------------------------
  static final public 
void simple_decl() throws ParseException {
    type();
    ident_list();
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case STR:{
      jj_consume_token(STR);
      break;
      }
    case LIST:{
      jj_consume_token(LIST);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ident_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

  static final public void fn_decl() throws ParseException {
    type();
    jj_consume_token(FUN);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    param_decls();
    jj_consume_token(RPAREN);
    body();
    jj_consume_token(NUF);
  }

  static final public void param_decls() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case LIST:
    case STR:{
      param_decl();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        param_decl();
      }
      break;
      }
    default:
      jj_la1[11] = jj_gen;

    }
  }

  static final public void param_decl() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
  }

//---------------------------   IF AND LOOP STATEMENTS  ----------------------------------
  static final public 
void if_stat() throws ParseException {
    jj_consume_token(IF);
    condition();
    jj_consume_token(THEN);
    clause();
    elifs();
    else_clause();
    jj_consume_token(FI);
  }

  static final public void elifs() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELIF:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(ELIF);
      condition();
      jj_consume_token(THEN);
      clause();
    }
  }

  static final public void else_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      clause();
      break;
      }
    default:
      jj_la1[13] = jj_gen;

    }
  }

  static final public void for_stat() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    expression();
    jj_consume_token(DO);
    body();
    jj_consume_token(OD);
  }

  static final public void while_stat() throws ParseException {/*@bgen(jjtree) while_stat */
  ASTwhile_stat jjtn000 = new ASTwhile_stat(JJTWHILE_STAT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(69);
      comparison();
      Do();
      body();
      Od();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

//---------------------------    ASSIGNMENTS, INDEXING, AND FUNCTION CALLS -----------------
  static final public 
void assignment() throws ParseException {
    jj_consume_token(IDENTIFIER);
    indexed();
    jj_consume_token(ASSIGN);
    expression();
  }

  static final public void indexed() throws ParseException {
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      jj_consume_token(DOT);
      unindexedterm();
      last_index();
    }
  }

  static final public void last_index() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COL:{
      jj_consume_token(COL);
      unindexedterm();
      break;
      }
    default:
      jj_la1[15] = jj_gen;

    }
  }

  static final public void fn_call() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    parameters();
    jj_consume_token(RPAREN);
  }

  static final public void parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case LSQUARE:
    case LPAREN:
    case SUB:
    case INTEGER:
    case IDENTIFIER:
    case STRING:{
      expression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        expression();
      }
      break;
      }
    default:
      jj_la1[17] = jj_gen;

    }
  }

//---------------------------   OTHER STATEMENTS   -------------------------------------------
  static final public 
void print_stat() throws ParseException {
    jj_consume_token(PRINT);
    expression();
  }

  static final public void return_stat() throws ParseException {
    jj_consume_token(RETURN);
    expression();
  }

//---------------------------   CONDITIONS ---------------------------------------------------
  static final public 
void condition() throws ParseException {
    and_clause();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      jj_consume_token(OR);
      and_clause();
    }
  }

  static final public void and_clause() throws ParseException {
    not_clause();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_9;
      }
      jj_consume_token(AND);
      not_clause();
    }
  }

  static final public void not_clause() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      not_clause();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_4(2147483647)) {
        comparison();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          condition();
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void comparison() throws ParseException {
    expression();
    comparator();
    expression();
  }

  static final public void comparator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LT:{
      jj_consume_token(LT);
      break;
      }
    case LE:{
      jj_consume_token(LE);
      break;
      }
    case GT:{
      jj_consume_token(GT);
      break;
      }
    case GE:{
      jj_consume_token(GE);
      break;
      }
    case NE:{
      jj_consume_token(NE);
      break;
      }
    case EQ:{
      jj_consume_token(EQ);
      break;
      }
    case IN:{
      jj_consume_token(IN);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//---------------------------   EXPRESSIONS ------------------------------------------------
  static final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
 ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetToken(t);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Integer() throws ParseException {/*@bgen(jjtree) Integer */
 ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetToken(t);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void String() throws ParseException {/*@bgen(jjtree) String */
 ASTString jjtn000 = new ASTString(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.jjtSetToken(t);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
      product();
      more_products();
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      product();
      more_products();
      break;
      }
    case LSQUARE:
    case LPAREN:
    case INTEGER:
    case IDENTIFIER:
    case STRING:{
      product();
      more_products();
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void more_products() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:{
      jj_consume_token(ADD);
      product();
      more_products();
      break;
      }
    case SUB:{
      jj_consume_token(SUB);
      product();
      more_products();
      break;
      }
    default:
      jj_la1[24] = jj_gen;

    }
  }

  static final public void product() throws ParseException {
    term();
    more_terms();
  }

  static final public void more_terms() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PROD:{
      jj_consume_token(PROD);
      term();
      more_terms();
      break;
      }
    case DIV:{
      jj_consume_token(DIV);
      term();
      more_terms();
      break;
      }
    case MOD:{
      jj_consume_token(MOD);
      term();
      more_terms();
      break;
      }
    default:
      jj_la1[25] = jj_gen;

    }
  }

  static final public void term() throws ParseException {
    unindexedterm();
    indexed();
  }

  static final public void unindexedterm() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      expression();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      if (jj_2_5(2)) {
        fn_call();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSQUARE:
        case INTEGER:
        case IDENTIFIER:
        case STRING:{
          simple_term();
          break;
          }
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void simple_term() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      Identifier();
      break;
      }
    case INTEGER:{
      Integer();
      break;
      }
    case STRING:{
      String();
      break;
      }
    case LSQUARE:{
      list();
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void list() throws ParseException {/*@bgen(jjtree) list */
  ASTlist jjtn000 = new ASTlist(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LSQUARE);
      list_elements();
      jj_consume_token(RSQUARE);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void LST() throws ParseException {/*@bgen(jjtree) LST */
 ASTLST jjtn000 = new ASTLST(JJTLST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        t = jj_consume_token(IDENTIFIER);
        break;
        }
      case INTEGER:{
        t = jj_consume_token(INTEGER);
        break;
        }
      case STRING:{
        t = jj_consume_token(STRING);
ASTlist jjtn001 = new ASTlist(JJTLIST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
        try {
jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    jjtc001 = false;
jjtn001.jjtSetToken(t);
        } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
        }
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void list_elements() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ADD:
    case LSQUARE:
    case LPAREN:
    case SUB:
    case INTEGER:
    case IDENTIFIER:
    case STRING:{
      expression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        expression();
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;

    }
  }

  static final public void altComp() throws ParseException {
ASTcomparison jjtn001 = new ASTcomparison(JJTCOMPARISON);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case GE:
        case GT:
        case LE:
        case LT:
        case NE:
        case IN:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_11;
        }
        comparator();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  static final public void EQ() throws ParseException {/*@bgen(jjtree) EQ */
  ASTEQ jjtn000 = new ASTEQ(JJTEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(EQ);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Do() throws ParseException {/*@bgen(jjtree) Do */
  ASTDo jjtn000 = new ASTDo(JJTDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Elif() throws ParseException {/*@bgen(jjtree) Elif */
  ASTElif jjtn000 = new ASTElif(JJTELIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELIF);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Else() throws ParseException {/*@bgen(jjtree) Else */
  ASTElse jjtn000 = new ASTElse(JJTELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ELSE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Fi() throws ParseException {/*@bgen(jjtree) Fi */
  ASTFi jjtn000 = new ASTFi(JJTFI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FI);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void For() throws ParseException {/*@bgen(jjtree) For */
  ASTFor jjtn000 = new ASTFor(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Fun() throws ParseException {/*@bgen(jjtree) Fun */
  ASTFun jjtn000 = new ASTFun(JJTFUN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void In() throws ParseException {/*@bgen(jjtree) In */
  ASTIn jjtn000 = new ASTIn(JJTIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Int() throws ParseException {/*@bgen(jjtree) Int */
  ASTInt jjtn000 = new ASTInt(JJTINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Nuf() throws ParseException {/*@bgen(jjtree) Nuf */
 ASTNuf jjtn000 = new ASTNuf(JJTNUF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(NUF);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Od() throws ParseException {/*@bgen(jjtree) Od */
  ASTOd jjtn000 = new ASTOd(JJTOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OD);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Print() throws ParseException {/*@bgen(jjtree) Print */
  ASTPrint jjtn000 = new ASTPrint(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PRINT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Return() throws ParseException {/*@bgen(jjtree) Return */
  ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Str() throws ParseException {/*@bgen(jjtree) Str */
  ASTStr jjtn000 = new ASTStr(JJTSTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STR);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Then() throws ParseException {/*@bgen(jjtree) Then */
  ASTThen jjtn000 = new ASTThen(JJTTHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(THEN);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_30()
 {
    return false;
  }

  static private boolean jj_3R_35()
 {
    return false;
  }

  static private boolean jj_3R_24()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  static private boolean jj_3R_29()
 {
    if (jj_scan_token(COL)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_34()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_26()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_33()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_17()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_23()) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_12()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_12()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_15()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_50()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  static private boolean jj_3R_49()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  static private boolean jj_3R_56()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_48()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3R_55()
 {
    return false;
  }

  static private boolean jj_3R_54()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  static private boolean jj_3R_51()
 {
    if (jj_scan_token(LSQUARE)) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(RSQUARE)) return true;
    return false;
  }

  static private boolean jj_3R_45()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_43()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_42()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_44()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_28()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_27()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_14()
 {
    if (jj_3R_18()) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_52()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_31()
 {
    if (jj_3R_23()) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  static private boolean jj_3R_40()
 {
    return false;
  }

  static private boolean jj_3R_39()
 {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_47()
 {
    return false;
  }

  static private boolean jj_3R_38()
 {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_46()
 {
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_13()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_41()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_41()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  static private boolean jj_3R_25()
 {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_37()
 {
    if (jj_scan_token(PROD)) return true;
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public HLTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8060020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x20000000,0x40000000,0x800,0x100,0x200,0x8060020,0x400000,0x40,0x200000,0x40000,0x11f000,0x8060020,0x8000020,0x880400,0x40000,0x20000,0x20000,0x0,0x200,0x8060020,0x11f000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x535,0x418000,0x735,0x10000,0x105,0x430,0x10735,0x10735,0x430,0x0,0x0,0x430,0x0,0x0,0x0,0x0,0x0,0x418000,0x0,0x0,0x0,0x0,0x8,0x418000,0x0,0x0,0x0,0x418000,0x418000,0x418000,0x0,0x418000,0x8,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x20,0x0,0x20,0x0,0x20,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public HL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public HL(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public HL(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public HL(HLTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(HLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[70];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 70; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
